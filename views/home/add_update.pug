include ../head.pug

body.bg-light.text-dark
  .container.py-5
    .row.justify-content-center
      .col-lg-8
        .card.shadow-lg.border-0.rounded-4
          .card-body.p-5
            h2.text-center.text-primary.mb-4 #{mode} Book

            .mb-3
              label(for="title" class="form-label") Title
              input(type="text" class="form-control rounded-3" id="title" name="title" required)

            .mb-3
              label(for="author" class="form-label") Author
              input(type="text" class="form-control rounded-3" id="author" name="author" required)

            .mb-3
              label(for="genre" class="form-label") Genre
              select(class="form-select rounded-3" id="genre" name="genre" required)
                option(value="" selected disabled) -- Select Genre --
                option(value="Fiction") Fiction
                option(value="Non-fiction") Non-fiction
                option(value="Mystery") Mystery
                option(value="Fantasy") Fantasy
                option(value="Biography") Biography
                option(value="Science Fiction") Science Fiction
                option(value="Other") Other

            .mb-3
              label(for="rating" class="form-label") Rating
              select(class="form-select rounded-3" id="rating" name="rating" required)
                option(value="" selected disabled) -- Select Rating --
                each val in [1, 2, 3, 4, 5]
                  option(value=val) #{val}

            .mb-4
              label(for="dateFinished" class="form-label") Date Finished
              .input-group.date(id="datetimepicker1" data-target-input="nearest")
                input(type="text" class="form-control datetimepicker-input rounded-start" data-target="#datetimepicker1" id="dateFinished" name="dateFinished" required)
                .input-group-append(data-target="#datetimepicker1" data-toggle="datetimepicker")
                  .input-group-text.rounded-end.bg-white
                    i.fas.fa-calendar-alt.text-primary

            .d-flex.justify-content-between.mt-4
              button(type="submit" class="btn btn-success px-4" onclick="submitForm()") #{mode === 'Update' ? 'Update' : 'Add'}
              button(type="submit" class="btn btn-outline-secondary px-4" onclick="window.location.href='/'")
                i.fas.fa-arrow-left.me-1
                | Back To List

  script.
    const format = 'DD/MM/YYYY HH:mm'
    const picker = new tempusDominus.TempusDominus(document.getElementById('datetimepicker1'), {
      localization: {
        'locale': 'fr'
      }
    });

    picker.dates.formatInput = function(date) {
      return moment(date).format(format)
    };

    if ("#{mode}" === "Update") {
      const bookData = !{JSON.stringify(bookData || {})}.book;
      document.getElementById('title').value = bookData.title || '';
      document.getElementById('author').value = bookData.author || '';
      document.getElementById('genre').value = bookData.genre || '';
      document.getElementById('rating').value = bookData.rating || '';
      picker.dates.setValue(new tempusDominus.DateTime(moment(bookData.dateFinished, format)));
    }

    function submitForm() {
      const bookData = {
        title: document.getElementById('title').value,
        author: document.getElementById('author').value,
        genre: document.getElementById('genre').value,
        rating: document.getElementById('rating').value,
        dateFinished: document.getElementById('dateFinished').value,
      };

      const url = "#{mode}" === "Update" ? 
      `/api/book/${!{JSON.stringify(bookData || {})}.id}` : '/api/book';
      const method = "#{mode}" === "Update" ? 'put' : 'post';

      axios[method](url, bookData).then(response => {
        alert('Success!');
        location.href = '/'
      })
      .catch(error => {
        if (error.response) {
          alert(JSON.stringify(error.response.data.errors))
        } else {
          alert(error)
        }
      });
    }